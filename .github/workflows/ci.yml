name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux jq
    
    - name: Set up BATS testing environment
      run: |
        chmod +x .github/scripts/setup-bats.sh
        ./.github/scripts/setup-bats.sh
    
    - name: Make scripts executable
      run: |
        # Make all shell scripts in hooks directory executable
        find hooks/ -name "*.sh" -exec chmod +x {} \;
        chmod +x test/run_tests.sh
    
    - name: Run gemini-review-hook tests
      run: |
        cd test
        ./run_tests.sh -f test_gemini_review_hook.bats
    
    - name: Run all tests
      run: |
        cd test
        ./run_tests.sh
    
    - name: Check script syntax
      run: |
        # Check syntax for all shell scripts in hooks directory
        find hooks/ -name "*.sh" -exec bash -n {} \;
        bash -n test/run_tests.sh
    
    - name: Validate test files
      run: |
        echo "Validating bats test files by running them..."
        cd test
        for file in *.bats; do
          if [ -f "$file" ]; then
            echo "Testing $file..."
            bats "$file" || {
              echo "Test failed in $file"
              exit 1
            }
          fi
        done

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Run shellcheck
      run: |
        # Check all shell scripts in hooks directory
        find hooks/ -name "*.sh" -exec shellcheck -S warning {} \;
        shellcheck -S warning test/run_tests.sh
        # Only check our own bats files, exclude submodule test files
        find test/ -name "*.bats" -not -path "test/test_helper/*" -exec shellcheck -S warning {} \;
    
    - name: Check for security issues
      run: |
        echo "Checking for potential security issues in shell scripts..."
        # Use find to properly exclude test helper directories
        # Check for dangerous patterns: eval, rm -rf / (root deletion), chmod 777
        if find . -name "*.sh" -o -name "*.bash" | grep -v "test/test_helper" | xargs grep -l "eval\|rm -rf /[^a-zA-Z0-9_/-]\|chmod 777" 2>/dev/null; then
          echo "WARNING: Potential security issues found!"
          echo "Please review the above matches carefully."
          exit 1
        fi
        echo "No obvious security issues found."

  format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Install shfmt
      run: |
        sudo wget https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64 -O /usr/local/bin/shfmt
        sudo chmod +x /usr/local/bin/shfmt
      env:
        DEBIAN_FRONTEND: noninteractive
    
    - name: Check shell script formatting
      run: |
        # Check all shell scripts in hooks directory
        find hooks/ -name "*.sh" -exec shfmt -d -s -i 4 {} \;
        shfmt -d -s -i 4 test/run_tests.sh

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Install markdown linter
      run: |
        npm install -g markdownlint-cli
    
    - name: Check markdown files
      run: |
        markdownlint README.md || true
        markdownlint zenn.md || true
        markdownlint GEMINI.md || true
    
    - name: Verify documentation completeness
      run: |
        echo "Checking documentation completeness..."
        
        # Check if README contains basic sections
        if ! grep -q "## 概要" README.md; then
          echo "Warning: README.md missing overview section"
        fi
        
        if ! grep -q "## 使い方" README.md; then
          echo "Warning: README.md missing usage section"
        fi
        
        if ! grep -q "## オプション" README.md; then
          echo "Warning: README.md missing options section"
        fi
        
        # Check if scripts have proper help text
        if ! grep -q "show_help" hooks/gemini-review-hook.sh; then
          echo "Warning: hooks/gemini-review-hook.sh missing help function"
        fi
        
        echo "Documentation check completed."

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint, format]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux jq
    
    - name: Set up BATS testing environment
      run: |
        chmod +x .github/scripts/setup-bats.sh
        ./.github/scripts/setup-bats.sh
    
    - name: Make scripts executable
      run: |
        # Make all shell scripts in hooks directory executable
        find hooks/ -name "*.sh" -exec chmod +x {} \;
        chmod +x test/run_tests.sh
    
    - name: Integration test - Mock scenario
      run: |
        echo "Running integration test with mock scenario..."
        
        # Create a test transcript file
        mkdir -p /tmp/test-integration
        cat > /tmp/test-integration/test-transcript.jsonl << 'TRANSCRIPT_EOF'
        {"type": "user", "message": {"content": [{"text": "テスト用のユーザーリクエスト"}]}}
        {"type": "assistant", "message": {"content": [{"text": "テスト用のアシスタント作業内容です。ファイルを作成しました。"}]}}
        TRANSCRIPT_EOF
        
        # Create a mock gemini command
        echo '#!/bin/bash' > /tmp/test-integration/gemini
        echo 'echo "統合テスト用のモックレビュー結果"' >> /tmp/test-integration/gemini
        chmod +x /tmp/test-integration/gemini
        
        # Add to PATH
        export PATH="/tmp/test-integration:$PATH"
        
        # Test gemini-review-hook with mock data
        export GEMINI_REVIEW_HOOK_DATA='{"session_id": "integration-test", "transcript_path": "/tmp/test-integration/test-transcript.jsonl", "stop_hook_active": false}'
        echo "Testing hooks/gemini-review-hook.sh..."
        HOOK_OUTPUT=$(./hooks/gemini-review-hook.sh)
        echo "Hook output: $HOOK_OUTPUT"
        
        # Verify hook output structure
        echo "$HOOK_OUTPUT" | jq -e '.decision' > /dev/null || { echo "❌ Invalid JSON output from hook"; exit 1; }
        echo "$HOOK_OUTPUT" | jq -e '.reason' > /dev/null || { echo "❌ Missing reason in hook output"; exit 1; }
        
        # Test shared-utils.sh functions
        echo "Testing hooks/shared-utils.sh..."
        source hooks/shared-utils.sh
        
        # Check shared-utils functions work
        if command -v log_info >/dev/null 2>&1; then
          echo "✅ Integration test passed: shared-utils.sh functions loaded"
          log_info "Test message"
        else
          echo "❌ Integration test failed: shared-utils.sh functions not available"
          exit 1
        fi
        
        # Cleanup
        rm -rf /tmp/test-integration
        rm -f /tmp/gemini-review /tmp/gemini-prompt /tmp/cc-gc-review-hook.log
    
    - name: Test script permissions and execution
      run: |
        echo "Testing script permissions and basic execution..."
        
        # Test hooks/gemini-review-hook.sh help
        ./hooks/gemini-review-hook.sh --help || true
        
        # Test hooks/gemini-review-hook.sh with invalid input (should handle gracefully)
        export GEMINI_REVIEW_HOOK_DATA='{"invalid": "json"}'
        ./hooks/gemini-review-hook.sh || true
        
        echo "✅ Permission and execution tests completed"


  release:
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Create release info
      id: release_info
      run: |
        echo "Creating release information..."
        
        # Get version from git tag or use commit hash
        if git describe --tags --exact-match HEAD 2>/dev/null; then
          VERSION=$(git describe --tags --exact-match HEAD)
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        
        echo "Version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > RELEASE_NOTES.md << RELEASE_EOF
        # Release $VERSION
        
        ## Changes in this release
        
        - Latest commit: $(git log -1 --pretty=format:"%h %s")
        - Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit SHA: $(git rev-parse HEAD)
        
        ## Test Results
        
        All tests passed successfully:
        - Unit tests: ✅
        - Integration tests: ✅
        - Linting: ✅
        - Security checks: ✅
        
        ## Usage
        
        Download the scripts and make them executable:
        ```bash
        chmod +x gemini-review-hook.sh
        ```
        
        See README.md for detailed usage instructions.
        RELEASE_EOF
        
        echo "Release notes created."
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cc-gc-review-${{ steps.release_info.outputs.version || 'latest' }}
        path: |
          hooks/
          README.md
          RELEASE_NOTES.md
        retention-days: 90

  notify-discord:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: [test, lint, format, integration, release]
    if: always() && (needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.format.result == 'failure' || needs.integration.result == 'failure' || needs.release.result == 'failure')

    steps:
    - uses: actions/checkout@v4
    
    - name: Send Discord notification on CI failure
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        

        # Determine branch name
        BRANCH_NAME="${{ github.ref_name }}"
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.head_ref }}"
        fi

        # Send notification using dedicated script
        chmod +x scripts/send_discord_notification.sh
        ./scripts/send_discord_notification.sh \
          "$DISCORD_WEBHOOK" \
          "${{ needs.test.result }}" \
          "${{ needs.lint.result }}" \
          "${{ needs.format.result }}" \
          "${{ needs.integration.result }}" \
          "${{ needs.release.result }}" \
          "$BRANCH_NAME" \
          "${{ github.sha }}" \
          "${{ github.actor }}" \
          "${{ github.event.head_commit.message || github.event.pull_request.title }}" \
          "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
